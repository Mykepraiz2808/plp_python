R SCRIPT THAT REPLICATES FURTHER ANALYSIS

# CREATE AN R SCRIPT THAT REPLICATES THE ANALYSIS AND IS ADAPTABLE FOR FURTHER EXPLORATION.
R_CODE = R'''
# LOAD PACKAGES
SUPPRESSPACKAGESTARTUPMESSAGES({
  LIBRARY(READXL)
  LIBRARY(DPLYR)
  LIBRARY(TIDYR)
  LIBRARY(GGPLOT2)
})

# -------- CONFIG --------
EXCEL_PATH <- "DATA TO DR SAKA OF 3 STATIONS.XLSX"   # PUT THE FILE IN THE WORKING DIRECTORY
RESPONSE_NAME <- "TAV"   # CHANGE TO "TMED" IF TAV IS EMPTY
N_LEVELS_TO_USE <- C(0, 100)  # "FIRST AND SECOND LEVELS" OF N-LEVEL

# --------- LOAD & TIDY (MATCHES PYTHON STEPS) ---------
RAW <- READXL::READ_EXCEL(EXCEL_PATH, SHEET = "SHEET1", COL_NAMES = FALSE)

HEADER_ROW <- 5  # 1-INDEXED ROW NUMBER WHERE HEADERS ARE; PYTHON USED INDEX 4 (0-BASED)
START_COLS <- C(2, 18, 34) # 1-INDEXED START COLUMNS FOR 3 STATIONS

MAKE_UNIQUE <- FUNCTION(X){
  SEEN <- LIST()
  OUT <- CHARACTER(LENGTH(X))
  FOR (I IN SEQ_ALONG(X)){
    KEY <- AS.CHARACTER(X[I])
    IF (IS.NULL(SEEN[[KEY]])){
      SEEN[[KEY]] <- 0
      OUT[I] <- KEY
    } ELSE {
      SEEN[[KEY]] <- SEEN[[KEY]] + 1
      OUT[I] <- PASTE0(KEY, "_", SEEN[[KEY]])
    }
  }
  OUT
}

EXTRACT_BLOCK <- FUNCTION(START_COL){
  # READ HEADERS UNTIL FIRST NA CELL TO THE RIGHT
  HEADERS <- C()
  C <- START_COL
  WHILE (C <= NCOL(RAW)){
    VAL <- RAW[[HEADER_ROW, C]]
    IF (IS.NA(VAL)) BREAK
    HEADERS <- C(HEADERS, AS.CHARACTER(VAL))
    C <- C + 1
  }
  COLS <- START_COL:(C-1)
  DFB <- RAW[(HEADER_ROW):(NROW(RAW)), COLS, DROP = FALSE]
  COLNAMES(DFB) <- MAKE_UNIQUE(HEADERS)
  DFB <- DFB[-1, , DROP = FALSE]  # DROP HEADER ROW COPY
  # TYPES
  IF ("DATE" %IN% NAMES(DFB)) {
    DFB$DATE <- SUPPRESSWARNINGS(AS.POSIXCT(AS.NUMERIC(DFB$DATE), ORIGIN = "1970-01-01", TZ = "UTC"))
  }
  NUM_COLS <- SETDIFF(NAMES(DFB), C("N-LEVEL","DATE"))
  DFB[NUM_COLS] <- LAPPLY(DFB[NUM_COLS], FUNCTION(X) SUPPRESSWARNINGS(AS.NUMERIC(X)))
  DFB <- DFB[!IS.NA(DFB$DATE), , DROP = FALSE]
  DFB
}

BLOCKS <- LAPPLY(START_COLS, EXTRACT_BLOCK)
FOR (I IN SEQ_ALONG(BLOCKS)) {
  BLOCKS[[I]]$STATION <- PASTE0("STATION", I)
}

KEEP_COLS <- C("N-LEVEL","DATE","SRAD","TMAX","TMIN","RAIN","DEWP","WIND","RHUM","TMED","TAV","STATION")
TIDY <- DPLYR::BIND_ROWS(LAPPLY(BLOCKS, FUNCTION(B) B[, INTERSECT(KEEP_COLS, NAMES(B)), DROP = FALSE])) %>%
  MUTATE(N = SUPPRESSWARNINGS(AS.NUMERIC(`N-LEVEL`)))

# CHOOSE RESPONSE
IF (!("TAV" %IN% NAMES(TIDY)) || ALL(IS.NA(TIDY$TAV))) {
  RESPONSE_NAME <- "TMED"
}

TIDY <- TIDY %>% FILTER(!IS.NA(N), !IS.NA(.DATA[[RESPONSE_NAME]]))

# SELECT FIRST TWO N LEVELS
LEVELS_SORTED <- SORT(UNIQUE(TIDY$N))
TWO_LEVELS <- INTERSECT(N_LEVELS_TO_USE, LEVELS_SORTED)
IF (LENGTH(TWO_LEVELS) < 2) TWO_LEVELS <- HEAD(LEVELS_SORTED, 2)

SUBSET <- TIDY %>% FILTER(N %IN% TWO_LEVELS)

# ---------- FULL FACTORIAL: STATION (1 VS 2) X N (FIRST VS SECOND) ----------
SUBSET12 <- SUBSET %>% FILTER(STATION %IN% C("STATION1","STATION2")) %>%
  MUTATE(N_FAC = FACTOR(N), STATION = FACTOR(STATION))

# ANOVA
FULL_FIT <- LM(REFORMULATE(TERMLABELS = C("N_FAC","STATION","N_FAC:STATION"), RESPONSE = RESPONSE_NAME), DATA = SUBSET12)
FULL_ANOVA <- ANOVA(FULL_FIT)
WRITE.CSV(FULL_ANOVA, "R_FULL_FACTORIAL_ANOVA.CSV", ROW.NAMES = TRUE)

# CELL MEANS AND EFFECTS
CELL_MEANS <- SUBSET12 %>%
  GROUP_BY(N_FAC, STATION) %>%
  SUMMARISE(MEAN_Y = MEAN(.DATA[[RESPONSE_NAME]], NA.RM = TRUE), .GROUPS = "DROP")
WRITE.CSV(CELL_MEANS, "R_FULL_FACTORIAL_CELL_MEANS.CSV", ROW.NAMES = FALSE)

# PLOTS
PNG("R_MAIN_EFFECT_N.PNG")
WITH(SUBSET12, TAPPLY(.DATA[[RESPONSE_NAME]], N_FAC, MEAN, NA.RM = TRUE)) %>%
  PLOT(TYPE = "O", XLAB = "N LEVEL", YLAB = PASTE("MEAN", RESPONSE_NAME), MAIN = "MAIN EFFECT OF N")
DEV.OFF()

PNG("R_MAIN_EFFECT_STATION.PNG")
WITH(SUBSET12, TAPPLY(.DATA[[RESPONSE_NAME]], STATION, MEAN, NA.RM = TRUE)) %>%
  PLOT(TYPE = "O", XLAB = "STATION", YLAB = PASTE("MEAN", RESPONSE_NAME), MAIN = "MAIN EFFECT OF STATION")
DEV.OFF()

# ---------- FRACTIONAL FACTORIAL (2^(3-1)) WITH GENERATOR C = A*B ----------
# A = N (TWO-LEVEL), B = STATION (1 VS 2), C = SRAD BIN (LOW/HIGH BY STATION)
SUBSET12$SRAD <- AS.NUMERIC(SUBSET12$SRAD)
SUBSET12 <- SUBSET12 %>% GROUP_BY(STATION) %>% MUTATE(SRAD_BIN = AS.INTEGER(SRAD > MEDIAN(SRAD, NA.RM = TRUE))) %>% UNGROUP()
SUBSET12$A <- IFELSE(SUBSET12$N == TWO_LEVELS[1], -1, +1)
SUBSET12$B <- IFELSE(SUBSET12$STATION == "STATION1", -1, +1)
SUBSET12$C <- IFELSE(SUBSET12$SRAD_BIN == 1, +1, -1)

FRAC <- SUBSET12 %>% FILTER(C == A*B)

# FIT ALIASED MAIN-EFFECTS MODEL
FRAC$N_FAC <- FACTOR(FRAC$N)
FRAC$C_FAC <- FACTOR(IFELSE(FRAC$C == 1, "HIGHSRAD", "LOWSRAD"))
FRAC_FIT <- LM(REFORMULATE(TERMLABELS = C("N_FAC","STATION","C_FAC"), RESPONSE = RESPONSE_NAME), DATA = FRAC)
FRAC_ANOVA <- ANOVA(FRAC_FIT)
WRITE.CSV(FRAC_ANOVA, "R_FRACTIONAL_FACTORIAL_ANOVA.CSV", ROW.NAMES = TRUE)

# CELL MEANS
FRAC_CELL_MEANS <- FRAC %>% GROUP_BY(N_FAC, STATION, C_FAC) %>%
  SUMMARISE(MEAN_Y = MEAN(.DATA[[RESPONSE_NAME]], NA.RM = TRUE), .GROUPS="DROP")
WRITE.CSV(FRAC_CELL_MEANS, "R_FRACTIONAL_CELL_MEANS.CSV", ROW.NAMES = FALSE)

# NOTES:
# - YOU CAN CHANGE `RESPONSE_NAME` TO ANALYZE A DIFFERENT RESPONSE.
# - TO USE OTHER STATIONS OR DEFINE A DIFFERENT THIRD FACTOR FOR THE FRACTIONAL DESIGN,
#   MODIFY THE CONSTRUCTION OF `C_FAC` ACCORDINGLY.
'''
R_PATH = "/MNT/DATA/FACTORIAL_ANALYSIS.R"
WITH OPEN(R_PATH, "W") AS F:
    F.WRITE(R_CODE)

R_PATH
